rmsetest
sample_n(dat2, 0.8*nrow(dat2))
library(dplyr)
library(lubridate)
library(ggplot2)
sample_n(dat2, 0.8*nrow(dat2))
set.seed(1000)
trainGLM = sample_n(dat2, 0.8*nrow(dat2))
testGLM = sample_n(dat2, 0.2*nrow(dat2))
trainGLM
set.seed(1000)
trainGLM = sample_n(dat2, 0.8*nrow(dat2))
testGLM = sample_n(dat2, 0.2*nrow(dat2))
trainGLM
set.seed(1000)
trainGLM = sample_n(dat2, 0.8*nrow(dat2))
testGLM = sample_n(dat2, 0.2*nrow(dat2))
trainGLM
set.seed(1000)
trainGLM = sample_n(dat2, 0.8*nrow(dat2))
testGLM = sample_n(dat2, 0.2*nrow(dat2))
trainGLM
glm1 <- glm(three ~ one + two, family = gaussian, data = trainGLM)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm2 <- glm(three ~ one + two + one:two, family = gaussian, data = trainGLM)
summary(glm2)
predict.glm2.train <- predict(glm2, type = "response")
predict.glm2.test <- predict(glm2, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm2.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm2.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm3 <- glm(three ~ one:two, family = gaussian, data = trainGLM)
summary(glm3)
glm3 <- glm(three ~ one:two, family = gaussian, data = trainGLM)
summary(glm3)
predict.glm3.train <- predict(glm3, type = "response")
predict.glm3.test <- predict(glm3, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm3.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm3.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm4 <- glm(three ~ one + one:two, family = gaussian, data = trainGLM)
summary(glm4)
predict.glm4.train <- predict(glm4, type = "response")
predict.glm4.test <- predict(glm4, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm4.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm4.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm5 <- glm(three ~ two + one:two, family = gaussian, data = trainGLM)
summary(glm5)
predict.glm5.train <- predict(glm5, type = "response")
predict.glm5.test <- predict(glm5, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm5.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm5.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm6 <- glm(three ~ one, family = gaussian, data = trainGLM)
summary(glm6)
predict.glm6.train <- predict(glm6, type = "response")
predict.glm6.test <- predict(glm6, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm6.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm6.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm7 <- glm(three ~ two, family = gaussian, data = trainGLM)
summary(glm7)
predict.glm7.train <- predict(glm7, type = "response")
predict.glm7.test <- predict(glm7, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm7.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm7.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
knitr::opts_chunk$set(echo = TRUE)
dat %>% filter(country_id == 'BDV') %>% group_by(site_id) %>%
summarise(unique_ids = n_distinct(user_id)) %>% arrange(desc(unique_ids))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
dat = read.csv('moloco.csv')
dat %>% filter(country_id == 'BDV') %>% group_by(site_id) %>%
summarise(unique_ids = n_distinct(user_id)) %>% arrange(desc(unique_ids))
dat %>% filter(country_id == 'BDV') %>%
group_by(site_id) %>%
summarise(unique_ids = n_distinct(user_id)) %>%
arrange(desc(unique_ids))
dat %>% filter(as.Date(ts) >= as.Date('2019-02-03') & as.Date(ts) <= as.Date('2019-02-04')) %>%
group_by(user_id, site_id) %>%
summarise(num_visits = length(ts)) %>%
arrange(desc(num_visits))
knitr::opts_chunk$set(echo = TRUE)
plot(dat2$three, glm6$fitted.values)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
dat = read.csv('moloco.csv')
dat %>% filter(country_id == 'BDV') %>%
group_by(site_id) %>%
summarise(unique_ids = n_distinct(user_id)) %>%
arrange(desc(unique_ids))
dat %>% filter(as.Date(ts) >= as.Date('2019-02-03') & as.Date(ts) <= as.Date('2019-02-04')) %>%
group_by(user_id, site_id) %>%
summarise(num_visits = length(ts)) %>%
arrange(desc(num_visits))
dat %>% group_by(user_id) %>%
slice(which.max(as.Date(ts))) %>%
group_by(site_id) %>%
summarise(num_visitors = length(user_id)) %>%
arrange(desc(num_visitors))
dat %>% group_by(user_id) %>%
slice(which.min(as.Date(ts)), which.max(as.Date(ts))) %>%
summarise(diff = n_distinct(site_id)) %>%
filter(diff == 1) %>%
nrow
library(caret)
dat2 = read.csv('dat2.csv', col.names=c('one','two','three'))
set.seed(1000)
partition <- createDataPartition(dat2[, 2], list = FALSE, p = 0.80)
trainGLM <- dat2[partition, ]
testGLM <- dat2[-partition, ]
glm1 <- glm(three ~ one + two, family = gaussian, data = trainGLM)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm2 <- glm(three ~ one + two + one:two, family = gaussian, data = trainGLM)
summary(glm2)
predict.glm2.train <- predict(glm2, type = "response")
predict.glm2.test <- predict(glm2, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm2.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm2.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm3 <- glm(three ~ one:two, family = gaussian, data = trainGLM)
summary(glm3)
predict.glm3.train <- predict(glm3, type = "response")
predict.glm3.test <- predict(glm3, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm3.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm3.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm4 <- glm(three ~ one + one:two, family = gaussian, data = trainGLM)
summary(glm4)
predict.glm4.train <- predict(glm4, type = "response")
predict.glm4.test <- predict(glm4, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm4.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm4.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm5 <- glm(three ~ two + one:two, family = gaussian, data = trainGLM)
summary(glm5)
predict.glm5.train <- predict(glm5, type = "response")
predict.glm5.test <- predict(glm5, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm5.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm5.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm6 <- glm(three ~ one, family = gaussian, data = trainGLM)
summary(glm6)
predict.glm6.train <- predict(glm6, type = "response")
predict.glm6.test <- predict(glm6, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm6.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm6.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm7 <- glm(three ~ two, family = gaussian, data = trainGLM)
summary(glm7)
predict.glm7.train <- predict(glm7, type = "response")
predict.glm7.test <- predict(glm7, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm7.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm7.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
plot(dat2$three, glm6$fitted.values)
glm6.values
fitted(glm6)
plot(dat2$three, fitted(glm6))
fitted(predict(glm6, type = "response"))
predict(glm6, type = "response")
glm6final <- glm(three ~ one, family = gaussian, data = dat2)
plot(dat2$three, fitted(glm6final))
glm6final <- glm(three ~ one, family = gaussian, data = dat2)
plot(dat2$three, fitted(glm6final))
dat2$three
filter(dat, dat$three != -10000)
dat$three == -10000
dat$three
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
dat = read.csv('moloco.csv')
dat %>% filter(country_id == 'BDV') %>%
group_by(site_id) %>%
summarise(unique_ids = n_distinct(user_id)) %>%
arrange(desc(unique_ids))
dat %>% filter(as.Date(ts) >= as.Date('2019-02-03') & as.Date(ts) <= as.Date('2019-02-04')) %>%
group_by(user_id, site_id) %>%
summarise(num_visits = length(ts)) %>%
arrange(desc(num_visits))
dat %>% group_by(user_id) %>%
slice(which.max(as.Date(ts))) %>%
group_by(site_id) %>%
summarise(num_visitors = length(user_id)) %>%
arrange(desc(num_visitors))
dat %>% group_by(user_id) %>%
slice(which.min(as.Date(ts)), which.max(as.Date(ts))) %>%
summarise(diff = n_distinct(site_id)) %>%
filter(diff == 1) %>%
nrow
library(caret)
dat2 = read.csv('dat2.csv', col.names=c('one','two','three'))
set.seed(1000)
partition <- createDataPartition(dat2[, 2], list = FALSE, p = 0.80)
trainGLM <- dat2[partition, ]
testGLM <- dat2[-partition, ]
glm1 <- glm(three ~ one + two, family = gaussian, data = trainGLM)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm2 <- glm(three ~ one + two + one:two, family = gaussian, data = trainGLM)
summary(glm2)
predict.glm2.train <- predict(glm2, type = "response")
predict.glm2.test <- predict(glm2, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm2.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm2.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm3 <- glm(three ~ one:two, family = gaussian, data = trainGLM)
summary(glm3)
predict.glm3.train <- predict(glm3, type = "response")
predict.glm3.test <- predict(glm3, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm3.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm3.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm4 <- glm(three ~ one + one:two, family = gaussian, data = trainGLM)
summary(glm4)
predict.glm4.train <- predict(glm4, type = "response")
predict.glm4.test <- predict(glm4, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm4.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm4.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm5 <- glm(three ~ two + one:two, family = gaussian, data = trainGLM)
summary(glm5)
predict.glm5.train <- predict(glm5, type = "response")
predict.glm5.test <- predict(glm5, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm5.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm5.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm6 <- glm(three ~ one, family = gaussian, data = trainGLM)
summary(glm6)
predict.glm6.train <- predict(glm6, type = "response")
predict.glm6.test <- predict(glm6, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm6.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm6.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm7 <- glm(three ~ two, family = gaussian, data = trainGLM)
summary(glm7)
predict.glm7.train <- predict(glm7, type = "response")
predict.glm7.test <- predict(glm7, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm7.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm7.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm6final <- glm(three ~ one, family = gaussian, data = dat2)
dat$three
dat$three
dat2$three
dat2$three == -10000
filter(dat2, dat2$three != -10000)
no_outliers = filter(dat2, dat2$three != -10000)
no_outliers = filter(dat2, dat2$three != -10000)
glm6final <- glm(three ~ one, family = gaussian, data = no_outliers)
plot(no_outliers$three, fitted(glm6final))
glm1 <- glm(three ~ one + two, family = gaussian, data = no_outliers)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
plot(dat2$one, dat2$two)
plot(dat2$one, dat2$three)
plot(dat2$one, dat2$three)
no_outliers = filter(dat2, dat2$three != -10000)
plot(dat2$one, dat2$three)
plot(dat2$two, dat$three)
plot(dat2$one, dat2$three)
plot(dat2$two, dat2$three)
set.seed(1000)
partition <- createDataPartition(no_outliers[, 2], list = FALSE, p = 0.80)
trainGLM <- no_outliers[partition, ]
testGLM <- no_outliers[-partition, ]
glm1 <- glm(three ~ one + two, family = gaussian, data = no_outliers)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm2 <- glm(three ~ one + two + one:two, family = gaussian, data = trainGLM)
summary(glm2)
predict.glm2.train <- predict(glm2, type = "response")
predict.glm2.test <- predict(glm2, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm2.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm2.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm3 <- glm(three ~ one:two, family = gaussian, data = trainGLM)
summary(glm3)
predict.glm3.train <- predict(glm3, type = "response")
predict.glm3.test <- predict(glm3, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm3.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm3.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm4 <- glm(three ~ one + one:two, family = gaussian, data = trainGLM)
summary(glm4)
predict.glm4.train <- predict(glm4, type = "response")
predict.glm4.test <- predict(glm4, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm4.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm4.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm5 <- glm(three ~ two + one:two, family = gaussian, data = trainGLM)
summary(glm5)
predict.glm5.train <- predict(glm5, type = "response")
predict.glm5.test <- predict(glm5, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm5.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm5.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm6 <- glm(three ~ one, family = gaussian, data = trainGLM)
summary(glm6)
predict.glm6.train <- predict(glm6, type = "response")
predict.glm6.test <- predict(glm6, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm6.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm6.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm7 <- glm(three ~ two, family = gaussian, data = trainGLM)
summary(glm7)
predict.glm7.train <- predict(glm7, type = "response")
predict.glm7.test <- predict(glm7, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm7.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm7.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
plot(dat2$one, dat2$three)
plot(dat2$two, dat2$three)
glm5final <- glm(three ~ one + one * two, family = gaussian, data = no_outliers)
plot(no_outliers$three, fitted(glm5final))
plot(fitted(glm5final), no_outliers$three)
dat2 = read.csv('dat2.csv', col.names=c('A','B','C'))
plot(dat2$A, dat2$C)
plot(dat2$B, dat2$C)
no_outliers = filter(dat2, dat2$C != -10000)
set.seed(1000)
partition <- createDataPartition(no_outliers[, 1], list = FALSE, p = 0.80)
trainGLM <- no_outliers[partition, ]
testGLM <- no_outliers[-partition, ]
glm1 <- glm(C ~ A + B, family = gaussian, data = no_outliers)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
set.seed(1000)
partition <- createDataPartition(no_outliers[, 2], list = FALSE, p = 0.80)
trainGLM <- no_outliers[partition, ]
testGLM <- no_outliers[-partition, ]
glm1 <- glm(C ~ A + B, family = gaussian, data = no_outliers)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$three)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$three)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
set.seed(1000)
partition <- createDataPartition(no_outliers[, 1], list = FALSE, p = 0.80)
trainGLM <- no_outliers[partition, ]
testGLM <- no_outliers[-partition, ]
glm1 <- glm(C ~ A + B, family = gaussian, data = no_outliers)
summary(glm1)
predict.glm1.train <- predict(glm1, type = "response")
predict.glm1.test <- predict(glm1, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm1.train - trainGLM$C)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm1.test - testGLM$C)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm2 <- glm(C ~ A + B + A:B, family = gaussian, data = trainGLM)
summary(glm2)
predict.glm2.train <- predict(glm2, type = "response")
predict.glm2.test <- predict(glm2, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm2.train - trainGLM$C)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm2.test - testGLM$C)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm3 <- glm(C ~ A:B, family = gaussian, data = trainGLM)
summary(glm3)
predict.glm3.train <- predict(glm3, type = "response")
predict.glm3.test <- predict(glm3, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm3.train - trainGLM$C)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm3.test - testGLM$C)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm4 <- glm(C ~ A + A:B, family = gaussian, data = trainGLM)
summary(glm4)
predict.glm4.train <- predict(glm4, type = "response")
predict.glm4.test <- predict(glm4, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm4.train - trainGLM$C)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm4.test - testGLM$C)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm5 <- glm(C ~ B + A:B, family = gaussian, data = trainGLM)
summary(glm5)
predict.glm5.train <- predict(glm5, type = "response")
predict.glm5.test <- predict(glm5, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm5.train - trainGLM$C)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm5.test - testGLM$C)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm6 <- glm(C ~ A, family = gaussian, data = trainGLM)
summary(glm6)
predict.glm6.train <- predict(glm6, type = "response")
predict.glm6.test <- predict(glm6, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm6.train - trainGLM$C)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm6.test - testGLM$C)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm7 <- glm(C ~ B, family = gaussian, data = trainGLM)
summary(glm7)
predict.glm7.train <- predict(glm7, type = "response")
predict.glm7.test <- predict(glm7, newdata = testGLM, type = "response")
rmsetrain <- sqrt(sum((predict.glm7.train - trainGLM$C)^2)/nrow(trainGLM))
rmsetest <- sqrt(sum((predict.glm7.test - testGLM$C)^2)/nrow(testGLM))
print("Prediction error of training and test sets")
rmsetrain
rmsetest
glm2final <- glm(three ~ one + two + one * two, family = gaussian, data = no_outliers)
glm2final <- glm(three ~ A + B + A:B, family = gaussian, data = no_outliers)
glm2final <- glm(C ~ A + B + A:B, family = gaussian, data = no_outliers)
plot(fitted(glm2final), no_outliers$C)
